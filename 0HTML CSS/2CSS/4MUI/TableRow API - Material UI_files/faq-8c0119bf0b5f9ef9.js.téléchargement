(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[88180,39519],{333897:function(n,e,s){var a=s(915012),t=/^\s+/;n.exports=function(n){return n?n.slice(0,a(n)+1).replace(t,""):n}},915012:function(n){var e=/\s/;n.exports=function(n){for(var s=n.length;s--&&e.test(n.charAt(s)););return s}},889678:function(n,e,s){var a=s(706627),t=s(885365),o=s(67948),i=Math.max,p=Math.min;n.exports=function(n,e,s){var c,l,r,u,d,h,k=0,m=!1,g=!1,y=!0;if("function"!=typeof n)throw TypeError("Expected a function");function f(e){var s=c,a=l;return c=l=void 0,k=e,u=n.apply(a,s)}function v(n){var s=n-h,a=n-k;return void 0===h||s>=e||s<0||g&&a>=r}function b(){var n,s,a,o=t();if(v(o))return w(o);d=setTimeout(b,(n=o-h,s=o-k,a=e-n,g?p(a,r-s):a))}function w(n){return(d=void 0,y&&c)?f(n):(c=l=void 0,u)}function x(){var n,s=t(),a=v(s);if(c=arguments,l=this,h=s,a){if(void 0===d)return k=n=h,d=setTimeout(b,e),m?f(n):u;if(g)return clearTimeout(d),d=setTimeout(b,e),f(h)}return void 0===d&&(d=setTimeout(b,e)),u}return e=o(e)||0,a(s)&&(m=!!s.leading,r=(g="maxWait"in s)?i(o(s.maxWait)||0,e):r,y="trailing"in s?!!s.trailing:y),x.cancel=function(){void 0!==d&&clearTimeout(d),k=0,c=h=l=d=void 0},x.flush=function(){return void 0===d?u:w(t())},x}},706627:function(n){n.exports=function(n){var e=typeof n;return null!=n&&("object"==e||"function"==e)}},885365:function(n,e,s){var a=s(573401);n.exports=function(){return a.Date.now()}},123763:function(n,e,s){var a=s(889678),t=s(706627);n.exports=function(n,e,s){var o=!0,i=!0;if("function"!=typeof n)throw TypeError("Expected a function");return t(s)&&(o="leading"in s?!!s.leading:o,i="trailing"in s?!!s.trailing:i),a(n,e,{leading:o,maxWait:e,trailing:i})}},67948:function(n,e,s){var a=s(333897),t=s(706627),o=s(42848),i=0/0,p=/^[-+]0x[0-9a-f]+$/i,c=/^0b[01]+$/i,l=/^0o[0-7]+$/i,r=parseInt;n.exports=function(n){if("number"==typeof n)return n;if(o(n))return i;if(t(n)){var e="function"==typeof n.valueOf?n.valueOf():n;n=t(e)?e+"":e}if("string"!=typeof n)return 0===n?n:+n;n=a(n);var s=c.test(n);return s||l.test(n)?r(n.slice(2),s?2:8):p.test(n)?i:+n}},62066:function(n,e,s){"use strict";s.r(e),s.d(e,{default:function(){return u}});var a={};s.r(a),s.d(a,{demoComponents:function(){return c},demos:function(){return p},docs:function(){return i},srcComponents:function(){return l}});var t=s(41732);s(470079);var o=s(292812),i={en:{description:"Stuck on a particular problem? Check some of these common gotchas first in the FAQ.",location:"/docs/data/material/getting-started/faq/faq.md",rendered:['<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n      <symbol id="error-icon" viewBox="0 0 20 20">\n      <path fill-rule="evenodd" d="M2 7.4v5.2a2 2 0 0 0 .586 1.414l3.4 3.4A2 2 0 0 0 7.4 18h5.2a2 2 0 0 0 1.414-.586l3.4-3.4A2 2 0 0 0 18 12.6V7.4a2 2 0 0 0-.586-1.414l-3.4-3.4A2 2 0 0 0 12.6 2H7.4a2 2 0 0 0-1.414.586l-3.4 3.4A2 2 0 0 0 2 7.4Zm11.03-.43a.75.75 0 0 1 0 1.06L11.06 10l1.97 1.97a.75.75 0 1 1-1.06 1.06L10 11.06l-1.97 1.97a.75.75 0 0 1-1.06-1.06L8.94 10 6.97 8.03a.75.75 0 0 1 1.06-1.06L10 8.94l1.97-1.97a.75.75 0 0 1 1.06 0Z" clip-rule="evenodd"/>\n      </symbol>\n      </svg>','<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n      <symbol id="warning-icon" viewBox="0 0 20 20">\n      <path d="M2.33 17a.735.735 0 0 1-.665-.375.631.631 0 0 1-.094-.375.898.898 0 0 1 .115-.396L9.353 3.062a.621.621 0 0 1 .281-.27.85.85 0 0 1 .729 0 .622.622 0 0 1 .281.27l7.667 12.792c.07.125.108.257.114.396a.63.63 0 0 1-.093.375.842.842 0 0 1-.271.27.728.728 0 0 1-.394.105H2.33Zm7.664-2.5c.211 0 .39-.072.536-.214a.714.714 0 0 0 .218-.532.736.736 0 0 0-.214-.535.714.714 0 0 0-.531-.22.736.736 0 0 0-.536.215.714.714 0 0 0-.219.531c0 .212.072.39.215.536.143.146.32.219.531.219Zm0-2.5c.211 0 .39-.072.536-.216a.72.72 0 0 0 .218-.534v-2.5a.728.728 0 0 0-.214-.534.72.72 0 0 0-.531-.216.734.734 0 0 0-.536.216.72.72 0 0 0-.219.534v2.5c0 .212.072.39.215.534a.72.72 0 0 0 .531.216Z"/>\n      </symbol>\n      </svg>','<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n      <symbol id="success-icon" viewBox="0 0 20 20">\n      <path d="m8.938 10.875-1.25-1.23a.718.718 0 0 0-.521-.228.718.718 0 0 0-.521.229.73.73 0 0 0 0 1.062l1.77 1.771c.153.153.327.23.521.23a.718.718 0 0 0 .521-.23l3.896-3.896a.73.73 0 0 0 0-1.062.718.718 0 0 0-.52-.23.718.718 0 0 0-.521.23l-3.376 3.354ZM10 18a7.796 7.796 0 0 1-3.104-.625 8.065 8.065 0 0 1-2.552-1.719 8.064 8.064 0 0 1-1.719-2.552A7.797 7.797 0 0 1 2 10c0-1.111.208-2.15.625-3.115a8.064 8.064 0 0 1 4.27-4.26A7.797 7.797 0 0 1 10 2c1.111 0 2.15.208 3.115.625a8.096 8.096 0 0 1 4.26 4.26C17.792 7.851 18 8.89 18 10a7.797 7.797 0 0 1-.625 3.104 8.066 8.066 0 0 1-4.26 4.271A7.774 7.774 0 0 1 10 18Z"/>\n      </symbol>\n      </svg>','<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n      <symbol id="info-icon" viewBox="0 0 20 20">\n      <path d="M9.996 14c.21 0 .39-.072.535-.216a.72.72 0 0 0 .219-.534v-3.5a.728.728 0 0 0-.214-.534.72.72 0 0 0-.532-.216.734.734 0 0 0-.535.216.72.72 0 0 0-.219.534v3.5c0 .213.071.39.214.534a.72.72 0 0 0 .532.216Zm0-6.5c.21 0 .39-.071.535-.214a.714.714 0 0 0 .219-.532.736.736 0 0 0-.214-.535.714.714 0 0 0-.532-.219.736.736 0 0 0-.535.214.714.714 0 0 0-.219.532c0 .21.071.39.214.535.143.146.32.219.532.219Zm.01 10.5a7.81 7.81 0 0 1-3.11-.625 8.065 8.065 0 0 1-2.552-1.719 8.066 8.066 0 0 1-1.719-2.551A7.818 7.818 0 0 1 2 9.99c0-1.104.208-2.14.625-3.105a8.066 8.066 0 0 1 4.27-4.26A7.818 7.818 0 0 1 10.009 2a7.75 7.75 0 0 1 3.106.625 8.083 8.083 0 0 1 4.26 4.265A7.77 7.77 0 0 1 18 9.994a7.81 7.81 0 0 1-.625 3.11 8.066 8.066 0 0 1-1.719 2.552 8.083 8.083 0 0 1-2.546 1.719 7.77 7.77 0 0 1-3.104.625Z"/>\n      </symbol>\n      </svg>','\n      <svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n      <symbol id="copied-icon" viewBox="0 0 24 24">\n        <path d="M20 2H8c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-8.24 11.28L9.69 11.2c-.38-.39-.38-1.01 0-1.4.39-.39 1.02-.39 1.41 0l1.36 1.37 4.42-4.46c.39-.39 1.02-.39 1.41 0 .38.39.38 1.01 0 1.4l-5.13 5.17c-.37.4-1.01.4-1.4 0zM3 6c-.55 0-1 .45-1 1v13c0 1.1.9 2 2 2h13c.55 0 1-.45 1-1s-.45-1-1-1H5c-.55 0-1-.45-1-1V7c0-.55-.45-1-1-1z" />\n      </symbol>\n      </svg>','<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n      <symbol id="copy-icon" viewBox="0 0 24 24">\n      <path d="M15 20H5V7c0-.55-.45-1-1-1s-1 .45-1 1v13c0 1.1.9 2 2 2h10c.55 0 1-.45 1-1s-.45-1-1-1zm5-4V4c0-1.1-.9-2-2-2H9c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h9c1.1 0 2-.9 2-2zm-2 0H9V4h9v12z" />\n      +</symbol>\n      </svg>','<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n        <symbol id="anchor-link-icon" viewBox="0 0 12 6">\n          <path d="M8.9176 0.083252H7.1676C6.84677 0.083252 6.58427 0.345752 6.58427 0.666585C6.58427 0.987419 6.84677 1.24992 7.1676 1.24992H8.9176C9.8801 1.24992 10.6676 2.03742 10.6676 2.99992C10.6676 3.96242 9.8801 4.74992 8.9176 4.74992H7.1676C6.84677 4.74992 6.58427 5.01242 6.58427 5.33325C6.58427 5.65409 6.84677 5.91659 7.1676 5.91659H8.9176C10.5276 5.91659 11.8343 4.60992 11.8343 2.99992C11.8343 1.38992 10.5276 0.083252 8.9176 0.083252ZM3.6676 2.99992C3.6676 3.32075 3.9301 3.58325 4.25094 3.58325H7.75094C8.07177 3.58325 8.33427 3.32075 8.33427 2.99992C8.33427 2.67909 8.07177 2.41659 7.75094 2.41659H4.25094C3.9301 2.41659 3.6676 2.67909 3.6676 2.99992ZM4.83427 4.74992H3.08427C2.12177 4.74992 1.33427 3.96242 1.33427 2.99992C1.33427 2.03742 2.12177 1.24992 3.08427 1.24992H4.83427C5.1551 1.24992 5.4176 0.987419 5.4176 0.666585C5.4176 0.345752 5.1551 0.083252 4.83427 0.083252H3.08427C1.47427 0.083252 0.167603 1.38992 0.167603 2.99992C0.167603 4.60992 1.47427 5.91659 3.08427 5.91659H4.83427C5.1551 5.91659 5.4176 5.65409 5.4176 5.33325C5.4176 5.01242 5.1551 4.74992 4.83427 4.74992Z" />\n        </symbol>\n    </svg>','<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n      <symbol id="comment-link-icon" viewBox="0 0 24 24">\n      <path d="M22.8481 4C22.8481 2.9 21.9481 2 20.8481 2H4.84814C3.74814 2 2.84814 2.9 2.84814 4V16C2.84814 17.1 3.74814 18 4.84814 18H18.8481L22.8481 22V4ZM16.8481 11H13.8481V14C13.8481 14.55 13.3981 15 12.8481 15C12.2981 15 11.8481 14.55 11.8481 14V11H8.84814C8.29814 11 7.84814 10.55 7.84814 10C7.84814 9.45 8.29814 9 8.84814 9H11.8481V6C11.8481 5.45 12.2981 5 12.8481 5C13.3981 5 13.8481 5.45 13.8481 6V9H16.8481C17.3981 9 17.8481 9.45 17.8481 10C17.8481 10.55 17.3981 11 16.8481 11Z" />\n      </symbol>\n      </svg>','<h1>Frequently Asked Questions</h1><p class="description">Stuck on a particular problem? Check some of these common gotchas first in the FAQ.</p>\n\n<p>If you still can&#39;t find what you&#39;re looking for, you can refer to our <a href="/material-ui/getting-started/support/">support page</a>.</p>\n<h2 id="mui-is-an-awesome-organization-how-can-i-support-it">MUI is an awesome organization. How can I support it?<a aria-labelledby="mui-is-an-awesome-organization-how-can-i-support-it" class="anchor-link" href="#mui-is-an-awesome-organization-how-can-i-support-it" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a><button title="Post a comment" class="comment-link" data-feedback-hash="mui-is-an-awesome-organization-how-can-i-support-it"><svg><use xlink:href="#comment-link-icon" /></svg></button></h2><p>There are many ways to support us:</p>\n<ul>\n<li><strong>Spread the word</strong>. Evangelize MUI&#39;s products by <a href="https://mui.com/">linking to mui.com</a> on your website—every backlink matters.\nFollow us on <a href="https://twitter.com/MUI_hq">X</a>, like and retweet the important news. Or just talk about us with your friends.</li>\n<li><strong>Give us feedback</strong>. Tell us what is going well or where there is improvement opportunities. Please upvote (\uD83D\uDC4D) the issues that you are the most interested in seeing solved.</li>\n<li><strong>Help new users</strong>. You can answer questions on\n<a href="https://stackoverflow.com/questions/tagged/material-ui">Stack Overflow</a>.</li>\n<li><strong>Make changes happen</strong>.<ul>\n<li>Edit the documentation. At the bottom of every page, you can find an &quot;Edit this page&quot; button.</li>\n<li>Report bugs or missing features by <a href="https://github.com/mui/material-ui/issues/new">creating an issue</a>.</li>\n<li>Review and comment on existing <a href="https://github.com/mui/material-ui/pulls">pull requests</a> and <a href="https://github.com/mui/material-ui/issues">issues</a>.</li>\n<li><a href="https://github.com/mui/material-ui/tree/HEAD/docs">Improve our documentation</a>, fix bugs, or add features by <a href="https://github.com/mui/material-ui/pulls">submitting a pull request</a>.</li>\n</ul>\n</li>\n<li><strong>Support us financially on <a href="https://opencollective.com/mui-org">Open\xa0Collective</a></strong>.\nIf you use Material\xa0UI in a commercial project and would like to support its continued development by becoming a Sponsor, or in a side or hobby project and would like to become a Backer, you can do so through Open\xa0Collective.\nAll funds donated are managed transparently, and Sponsors receive recognition in the README and on the homepage.</li>\n</ul>\n<h2 id="why-do-the-fixed-positioned-elements-move-when-a-modal-is-opened">Why do the fixed positioned elements move when a modal is opened?<a aria-labelledby="why-do-the-fixed-positioned-elements-move-when-a-modal-is-opened" class="anchor-link" href="#why-do-the-fixed-positioned-elements-move-when-a-modal-is-opened" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a><button title="Post a comment" class="comment-link" data-feedback-hash="why-do-the-fixed-positioned-elements-move-when-a-modal-is-opened"><svg><use xlink:href="#comment-link-icon" /></svg></button></h2><p>Scrolling is blocked as soon as a modal is opened.\nThis prevents interacting with the background when the modal should be the only interactive content. However, removing the scrollbar can make your <strong>fixed positioned elements</strong> move.\nIn this situation, you can apply a global <code>.mui-fixed</code> class name to tell Material\xa0UI to handle those elements.</p>\n<h2 id="how-can-i-disable-the-ripple-effect-globally">How can I disable the ripple effect globally?<a aria-labelledby="how-can-i-disable-the-ripple-effect-globally" class="anchor-link" href="#how-can-i-disable-the-ripple-effect-globally" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a><button title="Post a comment" class="comment-link" data-feedback-hash="how-can-i-disable-the-ripple-effect-globally"><svg><use xlink:href="#comment-link-icon" /></svg></button></h2><p>The ripple effect is exclusively coming from the <code>BaseButton</code> component.\nYou can disable the ripple effect globally by providing the following in your theme:</p>\n<div class="MuiCode-root"><pre><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> createTheme <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@mui/material\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> theme <span class="token operator">=</span> <span class="token function">createTheme</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">// Name of the component ⚛️</span>\n    <span class="token literal-property property">MuiButtonBase</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">defaultProps</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token comment">// The props to apply</span>\n        <span class="token literal-property property">disableRipple</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// No more ripple, on the whole application \uD83D\uDCA3!</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><svg focusable="false" aria-hidden="true" viewBox="0 0 24 24" data-testid="ContentCopyRoundedIcon"><use class="MuiCode-copy-icon" xlink:href="#copy-icon" /><use class="MuiCode-copied-icon" xlink:href="#copied-icon" /></svg><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<h2 id="how-can-i-disable-transitions-globally">How can I disable transitions globally?<a aria-labelledby="how-can-i-disable-transitions-globally" class="anchor-link" href="#how-can-i-disable-transitions-globally" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a><button title="Post a comment" class="comment-link" data-feedback-hash="how-can-i-disable-transitions-globally"><svg><use xlink:href="#comment-link-icon" /></svg></button></h2><p>Material\xa0UI uses the same theme helper for creating all its transitions.\nTherefore you can disable all transitions by overriding the helper in your theme:</p>\n<div class="MuiCode-root"><pre><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> createTheme <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@mui/material\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> theme <span class="token operator">=</span> <span class="token function">createTheme</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">transitions</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">// So `transition: none;` gets applied everywhere</span>\n    <span class="token function-variable function">create</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token string">\'none\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><svg focusable="false" aria-hidden="true" viewBox="0 0 24 24" data-testid="ContentCopyRoundedIcon"><use class="MuiCode-copy-icon" xlink:href="#copy-icon" /><use class="MuiCode-copied-icon" xlink:href="#copied-icon" /></svg><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<p>It can be useful to disable transitions during visual testing or to improve performance on low-end devices.</p>\n<p>You can go one step further by disabling all transitions and animations effects:</p>\n<div class="MuiCode-root"><pre><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> createTheme <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@mui/material\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> theme <span class="token operator">=</span> <span class="token function">createTheme</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">// Name of the component ⚛️</span>\n    <span class="token literal-property property">MuiCssBaseline</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">styleOverrides</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token string-property property">\'*, *::before, *::after\'</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n          <span class="token literal-property property">transition</span><span class="token operator">:</span> <span class="token string">\'none !important\'</span><span class="token punctuation">,</span>\n          <span class="token literal-property property">animation</span><span class="token operator">:</span> <span class="token string">\'none !important\'</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><svg focusable="false" aria-hidden="true" viewBox="0 0 24 24" data-testid="ContentCopyRoundedIcon"><use class="MuiCode-copy-icon" xlink:href="#copy-icon" /><use class="MuiCode-copied-icon" xlink:href="#copied-icon" /></svg><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<p>Notice that the usage of <code>CssBaseline</code> is required for the above approach to work.\nIf you choose not to use it, you can still disable transitions and animations by including these CSS rules:</p>\n<div class="MuiCode-root"><pre><code class="language-css"><span class="token selector">*,\n*::before,\n*::after</span> <span class="token punctuation">{</span>\n  <span class="token property">transition</span><span class="token punctuation">:</span> <span class="token string">\'none !important\'</span><span class="token punctuation">;</span>\n  <span class="token property">animation</span><span class="token punctuation">:</span> <span class="token string">\'none !important\'</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><svg focusable="false" aria-hidden="true" viewBox="0 0 24 24" data-testid="ContentCopyRoundedIcon"><use class="MuiCode-copy-icon" xlink:href="#copy-icon" /><use class="MuiCode-copied-icon" xlink:href="#copied-icon" /></svg><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<h2 id="do-i-have-to-use-emotion-to-style-my-app">Do I have to use Emotion to style my app?<a aria-labelledby="do-i-have-to-use-emotion-to-style-my-app" class="anchor-link" href="#do-i-have-to-use-emotion-to-style-my-app" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a><button title="Post a comment" class="comment-link" data-feedback-hash="do-i-have-to-use-emotion-to-style-my-app"><svg><use xlink:href="#comment-link-icon" /></svg></button></h2><p>No, it&#39;s not required.\nBut if you are using the default styled engine (<code>@mui/styled-engine</code>) the Emotion dependency comes built in, so carries no additional bundle size overhead.</p>\n<p>Perhaps, however, you&#39;re adding some Material\xa0UI components to an app that already uses another styling solution,\nor are already familiar with a different API, and don&#39;t want to learn a new one? In that case, head over to the\n<a href="/material-ui/integrations/interoperability/">Style library interoperability</a> section to learn how to restyle Material\xa0UI components with alternative style libraries.</p>\n<h2 id="when-should-i-use-inline-style-vs-css">When should I use inline-style vs. CSS?<a aria-labelledby="when-should-i-use-inline-style-vs-css" class="anchor-link" href="#when-should-i-use-inline-style-vs-css" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a><button title="Post a comment" class="comment-link" data-feedback-hash="when-should-i-use-inline-style-vs-css"><svg><use xlink:href="#comment-link-icon" /></svg></button></h2><p>As a rule of thumb, only use inline-styles for dynamic style properties.\nThe CSS alternative provides more advantages, such as:</p>\n<ul>\n<li>auto-prefixing</li>\n<li>better debugging</li>\n<li>media queries</li>\n<li>keyframes</li>\n</ul>\n<h2 id="how-do-i-use-react-router">How do I use react-router?<a aria-labelledby="how-do-i-use-react-router" class="anchor-link" href="#how-do-i-use-react-router" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a><button title="Post a comment" class="comment-link" data-feedback-hash="how-do-i-use-react-router"><svg><use xlink:href="#comment-link-icon" /></svg></button></h2><p>Visit the guide about <a href="/material-ui/integrations/routing/">integration with third-party routing libraries</a>, like react-router or Next.js, for more details.</p>\n<h2 id="how-can-i-access-the-dom-element">How can I access the DOM element?<a aria-labelledby="how-can-i-access-the-dom-element" class="anchor-link" href="#how-can-i-access-the-dom-element" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a><button title="Post a comment" class="comment-link" data-feedback-hash="how-can-i-access-the-dom-element"><svg><use xlink:href="#comment-link-icon" /></svg></button></h2><p>All Material\xa0UI components that should render something in the DOM forward their\nref to the underlying DOM component. This means that you can get DOM elements\nby reading the ref attached to Material\xa0UI components:</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token comment">// or a ref setter function</span>\n<span class="token keyword">const</span> ref <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// render</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Button</span></span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>ref<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>\n<span class="token comment">// usage</span>\n<span class="token keyword">const</span> element <span class="token operator">=</span> ref<span class="token punctuation">.</span>current<span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><svg focusable="false" aria-hidden="true" viewBox="0 0 24 24" data-testid="ContentCopyRoundedIcon"><use class="MuiCode-copy-icon" xlink:href="#copy-icon" /><use class="MuiCode-copied-icon" xlink:href="#copied-icon" /></svg><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<p>If you&#39;re not sure if the Material\xa0UI component in question forwards its ref you can check the API documentation under &quot;Props.&quot;\nYou should find the message below, like in the <a href="/material-ui/api/button/#props">Button API</a>, <a href="/material-ui/api/button/#props">Button API</a></p>\n<blockquote>\n<p>The ref is forwarded to the root element.</p>\n</blockquote>\n<h2 id="my-app-doesnt-render-correctly-on-the-server">My App doesn&#39;t render correctly on the server<a aria-labelledby="my-app-doesnt-render-correctly-on-the-server" class="anchor-link" href="#my-app-doesnt-render-correctly-on-the-server" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a><button title="Post a comment" class="comment-link" data-feedback-hash="my-app-doesnt-render-correctly-on-the-server"><svg><use xlink:href="#comment-link-icon" /></svg></button></h2><p>If it doesn&#39;t work, in 99% of cases it&#39;s a configuration issue.\nA missing property, a wrong call order, or a missing component – server-side rendering is strict about configuration.</p>\n<p>The best way to find out what&#39;s wrong is to compare your project to an <strong>already working setup</strong>.\nCheck out the <a href="/material-ui/guides/server-rendering/#reference-implementations">reference implementations</a>, bit by bit.</p>\n<h2 id="why-are-the-colors-i-am-seeing-different-from-what-i-see-here">Why are the colors I am seeing different from what I see here?<a aria-labelledby="why-are-the-colors-i-am-seeing-different-from-what-i-see-here" class="anchor-link" href="#why-are-the-colors-i-am-seeing-different-from-what-i-see-here" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a><button title="Post a comment" class="comment-link" data-feedback-hash="why-are-the-colors-i-am-seeing-different-from-what-i-see-here"><svg><use xlink:href="#comment-link-icon" /></svg></button></h2><p>The documentation site is using a custom theme. Hence, the color palette is\ndifferent from the default theme that Material\xa0UI ships. Please refer to <a href="/material-ui/customization/theming/">this\npage</a> to learn about theme customization.</p>\n<h2 id="why-does-component-x-require-a-dom-node-in-a-prop-instead-of-a-ref-object">Why does component X require a DOM node in a prop instead of a ref object?<a aria-labelledby="why-does-component-x-require-a-dom-node-in-a-prop-instead-of-a-ref-object" class="anchor-link" href="#why-does-component-x-require-a-dom-node-in-a-prop-instead-of-a-ref-object" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a><button title="Post a comment" class="comment-link" data-feedback-hash="why-does-component-x-require-a-dom-node-in-a-prop-instead-of-a-ref-object"><svg><use xlink:href="#comment-link-icon" /></svg></button></h2><p>Components like the <a href="/base-ui/react-portal/components-api/">Portal</a> or <a href="/material-ui/api/popper/#props">Popper</a> require a DOM node in the <code>container</code> or <code>anchorEl</code> prop respectively.\nIt seems convenient to simply pass a ref object in those props and let Material\xa0UI access the current value.</p>\n<p>This works in a simple scenario:</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> container <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useRef</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>App<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Portal</span></span> <span class="token attr-name">container</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>container<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>portaled children<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Portal</span></span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>container<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><svg focusable="false" aria-hidden="true" viewBox="0 0 24 24" data-testid="ContentCopyRoundedIcon"><use class="MuiCode-copy-icon" xlink:href="#copy-icon" /><use class="MuiCode-copied-icon" xlink:href="#copied-icon" /></svg><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<p>where <code>Portal</code> would only mount the children into the container when <code>container.current</code> is available.\nHere is a naive implementation of Portal:</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">Portal</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> children<span class="token punctuation">,</span> container <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>node<span class="token punctuation">,</span> setNode<span class="token punctuation">]</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useState</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  React<span class="token punctuation">.</span><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token function">setNode</span><span class="token punctuation">(</span>container<span class="token punctuation">.</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>container<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> ReactDOM<span class="token punctuation">.</span><span class="token function">createPortal</span><span class="token punctuation">(</span>children<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><svg focusable="false" aria-hidden="true" viewBox="0 0 24 24" data-testid="ContentCopyRoundedIcon"><use class="MuiCode-copy-icon" xlink:href="#copy-icon" /><use class="MuiCode-copied-icon" xlink:href="#copied-icon" /></svg><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<p>With this simple heuristic <code>Portal</code> might re-render after it mounts because refs are up-to-date before any effects run.\nHowever, just because a ref is up-to-date doesn&#39;t mean it points to a defined instance.\nIf the ref is attached to a ref forwarding component it is not clear when the DOM node will be available.\nIn the example above, the <code>Portal</code> would run an effect once, but might not re-render because <code>ref.current</code> is still <code>null</code>.\nThis is especially apparent for React.lazy components in Suspense.\nThe above implementation could also not account for a change in the DOM node.</p>\n<p>This is why a prop is required to the actual DOM node so that React can take care of determining when the <code>Portal</code> should re-render:</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>container<span class="token punctuation">,</span> setContainer<span class="token punctuation">]</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useState</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> handleRef <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useCallback</span><span class="token punctuation">(</span>\n    <span class="token punctuation">(</span><span class="token parameter">instance</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setContainer</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">[</span>setContainer<span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>App<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Portal</span></span> <span class="token attr-name">container</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>container<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>Portaled<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Portal</span></span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleRef<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><svg focusable="false" aria-hidden="true" viewBox="0 0 24 24" data-testid="ContentCopyRoundedIcon"><use class="MuiCode-copy-icon" xlink:href="#copy-icon" /><use class="MuiCode-copied-icon" xlink:href="#copied-icon" /></svg><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<h2 id="whats-the-clsx-dependency-for">What&#39;s the clsx dependency for?<a aria-labelledby="whats-the-clsx-dependency-for" class="anchor-link" href="#whats-the-clsx-dependency-for" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a><button title="Post a comment" class="comment-link" data-feedback-hash="whats-the-clsx-dependency-for"><svg><use xlink:href="#comment-link-icon" /></svg></button></h2><p><a href="https://github.com/lukeed/clsx">clsx</a> is a tiny utility for constructing <code>className</code> strings conditionally, out of an object with keys being the class strings, and values being booleans.</p>\n<p>Instead of writing:</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token comment">// let disabled = false, selected = true;</span>\n\n<span class="token keyword">return</span> <span class="token punctuation">(</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>\n    <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">MuiButton-root </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>disabled <span class="token operator">?</span> <span class="token string">\'Mui-disabled\'</span> <span class="token operator">:</span> <span class="token string">\'\'</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>\n      selected <span class="token operator">?</span> <span class="token string">\'Mui-selected\'</span> <span class="token operator">:</span> <span class="token string">\'\'</span>\n    <span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span></span>\n  <span class="token punctuation">/></span></span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><svg focusable="false" aria-hidden="true" viewBox="0 0 24 24" data-testid="ContentCopyRoundedIcon"><use class="MuiCode-copy-icon" xlink:href="#copy-icon" /><use class="MuiCode-copied-icon" xlink:href="#copied-icon" /></svg><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<p>you can do:</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token keyword">import</span> clsx <span class="token keyword">from</span> <span class="token string">\'clsx\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">return</span> <span class="token punctuation">(</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>\n    <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token function">clsx</span><span class="token punctuation">(</span><span class="token string">\'MuiButton-root\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n      <span class="token string-property property">\'Mui-disabled\'</span><span class="token operator">:</span> disabled<span class="token punctuation">,</span>\n      <span class="token string-property property">\'Mui-selected\'</span><span class="token operator">:</span> selected<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span>\n  <span class="token punctuation">/></span></span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><svg focusable="false" aria-hidden="true" viewBox="0 0 24 24" data-testid="ContentCopyRoundedIcon"><use class="MuiCode-copy-icon" xlink:href="#copy-icon" /><use class="MuiCode-copied-icon" xlink:href="#copied-icon" /></svg><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<h2 id="i-cannot-use-components-as-selectors-in-the-styled-utility-what-should-i-do">I cannot use components as selectors in the styled() utility. What should I do?<a aria-labelledby="i-cannot-use-components-as-selectors-in-the-styled-utility-what-should-i-do" class="anchor-link" href="#i-cannot-use-components-as-selectors-in-the-styled-utility-what-should-i-do" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a><button title="Post a comment" class="comment-link" data-feedback-hash="i-cannot-use-components-as-selectors-in-the-styled-utility-what-should-i-do"><svg><use xlink:href="#comment-link-icon" /></svg></button></h2><p>If you are getting the error: <code>TypeError: Cannot convert a Symbol value to a string</code>, take a look at the <a href="/system/styled/#how-to-use-components-selector-api">styled()</a> docs page for instructions on how you can fix this.</p>\n<h2 id="legacy-i-have-several-instances-of-styles-on-the-page">[legacy] I have several instances of styles on the page<a aria-labelledby="legacy-i-have-several-instances-of-styles-on-the-page" class="anchor-link" href="#legacy-i-have-several-instances-of-styles-on-the-page" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a><button title="Post a comment" class="comment-link" data-feedback-hash="legacy-i-have-several-instances-of-styles-on-the-page"><svg><use xlink:href="#comment-link-icon" /></svg></button></h2><p>If you are seeing a warning message in the console like the one below, you probably have several instances of <code>@mui/styles</code> initialized on the page.</p>\n<aside class="MuiCallout-root MuiCallout-warning">\n            <svg focusable="false" aria-hidden="true" viewBox="0 0 24 24" data-testid="ContentCopyRoundedIcon">\n<use class="MuiCode-copied-icon" xlink:href="#warning-icon" />\n</svg>\n            <div class="MuiCallout-content">\n            <p>It looks like there are several instances of <code>@mui/styles</code> initialized in this application.\nThis may cause theme propagation issues, broken class names, specificity issues, and make your application bigger without a good reason.</p>\n\n</div></aside><h3 id="possible-reasons">Possible reasons<a aria-labelledby="possible-reasons" class="anchor-link" href="#possible-reasons" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a><button title="Post a comment" class="comment-link" data-feedback-hash="possible-reasons"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><p>There are several common reasons for this to happen:</p>\n<ul>\n<li>You have another <code>@mui/styles</code> library somewhere in your dependencies.</li>\n<li>You have a monorepo structure for your project (for example, lerna or yarn workspaces) and <code>@mui/styles</code> module is a dependency in more than one package (this one is more or less the same as the previous one).</li>\n<li>You have several applications that are using <code>@mui/styles</code> running on the same page (for example, several entry points in Webpack are loaded on the same page).</li>\n</ul>\n<h3 id="duplicated-module-in-node-modules">Duplicated module in node_modules<a aria-labelledby="duplicated-module-in-node-modules" class="anchor-link" href="#duplicated-module-in-node-modules" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a><button title="Post a comment" class="comment-link" data-feedback-hash="duplicated-module-in-node-modules"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><p>If you think that the issue may be in the duplication of the @mui/styles module somewhere in your dependencies, there are several ways to check this.\nYou can use <code>npm ls @mui/styles</code>, <code>yarn list @mui/styles</code> or <code>find -L ./node_modules | grep /@mui/styles/package.json</code> commands in your application folder.</p>\n<p>If none of these commands identified the duplication, try analyzing your bundle for multiple instances of @mui/styles. You can just check your bundle source, or use a tool like <a href="https://github.com/danvk/source-map-explorer">source-map-explorer</a> or <a href="https://github.com/webpack-contrib/webpack-bundle-analyzer">webpack-bundle-analyzer</a>.</p>\n<p>If you identified that duplication is the issue that you are encountering there are several things you can try to solve it:</p>\n<p>If you are using npm you can try running <code>npm dedupe</code>.\nThis command searches the local dependencies and tries to simplify the structure by moving common dependencies further up the tree.</p>\n<p>If you are using Webpack, you can change the way it will <a href="https://webpack.js.org/configuration/resolve/#resolve-modules">resolve</a> the @mui/styles module. You can overwrite the default order in which Webpack will look for your dependencies and make your application node_modules more prioritized than default node module resolution order:</p>\n<div class="MuiCode-root"><pre><code class="language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">resolve: {\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  alias: {\n</span><span class="token prefix inserted">+</span><span class="token line">    \'@mui/styles\': path.resolve(appFolder, \'node_modules\', \'@mui/styles\'),\n</span><span class="token prefix inserted">+</span><span class="token line">  },\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">},</span></span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><svg focusable="false" aria-hidden="true" viewBox="0 0 24 24" data-testid="ContentCopyRoundedIcon"><use class="MuiCode-copy-icon" xlink:href="#copy-icon" /><use class="MuiCode-copied-icon" xlink:href="#copied-icon" /></svg><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<h3 id="running-multiple-applications-on-one-page">Running multiple applications on one page<a aria-labelledby="running-multiple-applications-on-one-page" class="anchor-link" href="#running-multiple-applications-on-one-page" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a><button title="Post a comment" class="comment-link" data-feedback-hash="running-multiple-applications-on-one-page"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><p>If you have several applications running on one page, consider using one @mui/styles module for all of them. If you are using Webpack, you can use <a href="https://webpack.js.org/plugins/commons-chunk-plugin/">CommonsChunkPlugin</a> to create an explicit <a href="https://webpack.js.org/plugins/commons-chunk-plugin/#explicit-vendor-chunk">vendor chunk</a>, that will contain the @mui/styles module:</p>\n<div class="MuiCode-root"><pre><code class="language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> module.exports = {\n</span><span class="token prefix unchanged"> </span><span class="token line">   entry: {\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">     vendor: [\'@mui/styles\'],\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">     app1: \'./src/app.1.js\',\n</span><span class="token prefix unchanged"> </span><span class="token line">     app2: \'./src/app.2.js\',\n</span><span class="token prefix unchanged"> </span><span class="token line">   },\n</span><span class="token prefix unchanged"> </span><span class="token line">   plugins: [\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">     new webpack.optimize.CommonsChunkPlugin({\n</span><span class="token prefix inserted">+</span><span class="token line">       name: \'vendor\',\n</span><span class="token prefix inserted">+</span><span class="token line">       minChunks: Infinity,\n</span><span class="token prefix inserted">+</span><span class="token line">     }),\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   ]\n</span><span class="token prefix unchanged"> </span><span class="token line"> }</span></span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><svg focusable="false" aria-hidden="true" viewBox="0 0 24 24" data-testid="ContentCopyRoundedIcon"><use class="MuiCode-copy-icon" xlink:href="#copy-icon" /><use class="MuiCode-copied-icon" xlink:href="#copied-icon" /></svg><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<h2 id="legacy-why-arent-my-components-rendering-correctly-in-production-builds">[legacy] Why aren&#39;t my components rendering correctly in production builds?<a aria-labelledby="legacy-why-arent-my-components-rendering-correctly-in-production-builds" class="anchor-link" href="#legacy-why-arent-my-components-rendering-correctly-in-production-builds" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a><button title="Post a comment" class="comment-link" data-feedback-hash="legacy-why-arent-my-components-rendering-correctly-in-production-builds"><svg><use xlink:href="#comment-link-icon" /></svg></button></h2><p>The #1 reason this happens is likely due to class name conflicts once your code is in a production bundle.\nFor Material\xa0UI to work, the <code>className</code> values of all components on a page must be generated by a single instance of the <a href="/system/styles/advanced/#class-names">class name generator</a>.</p>\n<p>To correct this issue, all components on the page need to be initialized such that there is only ever <strong>one class name generator</strong> among them.</p>\n<p>You could end up accidentally using two class name generators in a variety of scenarios:</p>\n<ul>\n<li>You accidentally <strong>bundle</strong> two versions of <code>@mui/styles</code>. You might have a dependency not correctly setting Material\xa0UI as a peer dependency.</li>\n<li>You are using <code>StylesProvider</code> for a <strong>subset</strong> of your React tree.</li>\n<li>You are using a bundler and it is splitting code in a way that causes multiple class name generator instances to be created.</li>\n</ul>\n<aside class="MuiCallout-root MuiCallout-success">\n            <svg focusable="false" aria-hidden="true" viewBox="0 0 24 24" data-testid="ContentCopyRoundedIcon">\n<use class="MuiCode-copied-icon" xlink:href="#success-icon" />\n</svg>\n            <div class="MuiCallout-content">\n            <p>If you are using Webpack with the <a href="https://webpack.js.org/plugins/split-chunks-plugin/">SplitChunksPlugin</a>, try configuring the <a href="https://webpack.js.org/configuration/optimization/#optimization-runtimechunk"><code>runtimeChunk</code> setting under <code>optimizations</code></a>.</p>\n\n</div></aside><p>Overall, it&#39;s simple to recover from this problem by wrapping each Material\xa0UI application with <a href="/system/styles/api/#stylesprovider"><code>StylesProvider</code></a> components at the top of their component trees <strong>and using a single class name generator shared among them</strong>.</p>\n<h3 id="legacy-css-works-only-on-first-load-and-goes-missing">[legacy] CSS works only on first load and goes missing<a aria-labelledby="legacy-css-works-only-on-first-load-and-goes-missing" class="anchor-link" href="#legacy-css-works-only-on-first-load-and-goes-missing" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a><button title="Post a comment" class="comment-link" data-feedback-hash="legacy-css-works-only-on-first-load-and-goes-missing"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><p>The CSS is only generated on the first load of the page.\nThen, the CSS is missing on the server for consecutive requests.</p>\n<h4>Action to Take</h4><p>The styling solution relies on a cache, the <em>sheets manager</em>, to only inject the CSS once per component type\n(if you use two buttons, you only need the CSS of the button one time).\nYou need to create <strong>a new <code>sheets</code> instance for each request</strong>.</p>\n<p>Example of fix:</p>\n<div class="MuiCode-root"><pre><code class="language-diff"><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">// Create a sheets instance.\n</span><span class="token prefix deleted">-</span><span class="token line">const sheets = new ServerStyleSheets();\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">function handleRender(req, res) {\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  // Create a sheets instance.\n</span><span class="token prefix inserted">+</span><span class="token line">  const sheets = new ServerStyleSheets();\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  //…\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  // Render the component to a string.\n</span><span class="token prefix unchanged"> </span><span class="token line">  const html = ReactDOMServer.renderToString(</span></span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><svg focusable="false" aria-hidden="true" viewBox="0 0 24 24" data-testid="ContentCopyRoundedIcon"><use class="MuiCode-copy-icon" xlink:href="#copy-icon" /><use class="MuiCode-copied-icon" xlink:href="#copied-icon" /></svg><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<h3 id="legacy-react-class-name-hydration-mismatch">[legacy] React class name hydration mismatch<a aria-labelledby="legacy-react-class-name-hydration-mismatch" class="anchor-link" href="#legacy-react-class-name-hydration-mismatch" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a><button title="Post a comment" class="comment-link" data-feedback-hash="legacy-react-class-name-hydration-mismatch"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><aside class="MuiCallout-root MuiCallout-warning">\n            <svg focusable="false" aria-hidden="true" viewBox="0 0 24 24" data-testid="ContentCopyRoundedIcon">\n<use class="MuiCode-copied-icon" xlink:href="#warning-icon" />\n</svg>\n            <div class="MuiCallout-content">\n            <p>Prop className did not match.</p>\n\n</div></aside><p>There is a class name mismatch between the client and the server. It might work for the first request.\nAnother symptom is that the styling changes between initial page load and the downloading of the client scripts.</p>\n<h4>Action to Take</h4><p>The class names value relies on the concept of <a href="/system/styles/advanced/#class-names">class name generator</a>.\nThe whole page needs to be rendered with <strong>a single generator</strong>.\nThis generator needs to behave identically on the server and on the client. For instance:</p>\n<ul>\n<li><p>You need to provide a new class name generator for each request.\nBut you shouldn&#39;t share a <code>createGenerateClassName()</code> between different requests:</p>\n<p>Example of fix:</p>\n<div class="MuiCode-root"><pre><code class="language-diff"><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">// Create a new class name generator.\n</span><span class="token prefix deleted">-</span><span class="token line">const generateClassName = createGenerateClassName();\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">function handleRender(req, res) {\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  // Create a new class name generator.\n</span><span class="token prefix inserted">+</span><span class="token line">  const generateClassName = createGenerateClassName();\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  //…\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  // Render the component to a string.\n</span><span class="token prefix unchanged"> </span><span class="token line">  const html = ReactDOMServer.renderToString(</span></span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><svg focusable="false" aria-hidden="true" viewBox="0 0 24 24" data-testid="ContentCopyRoundedIcon"><use class="MuiCode-copy-icon" xlink:href="#copy-icon" /><use class="MuiCode-copied-icon" xlink:href="#copied-icon" /></svg><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n</li>\n<li><p>You need to verify that your client and server are running the <strong>exactly the same version</strong> of Material\xa0UI.\nIt is possible that a mismatch of even minor versions can cause styling problems.\nTo check version numbers, run <code>npm list @mui/styles</code> in the environment where you build your application and also in your deployment environment.</p>\n<p>You can also ensure the same version in different environments by specifying a specific Material\xa0UI version in the dependencies of your package.json.</p>\n<p><em>example of fix (package.json):</em></p>\n<div class="MuiCode-root"><pre><code class="language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> "dependencies": {\n</span><span class="token prefix unchanged"> </span><span class="token line">   ...\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">   "@mui/styles": "^5.0.0",\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   "@mui/styles": "5.0.0",\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   ...\n</span><span class="token prefix unchanged"> </span><span class="token line"> },</span></span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><svg focusable="false" aria-hidden="true" viewBox="0 0 24 24" data-testid="ContentCopyRoundedIcon"><use class="MuiCode-copy-icon" xlink:href="#copy-icon" /><use class="MuiCode-copied-icon" xlink:href="#copied-icon" /></svg><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n</li>\n<li><p>You need to make sure that the server and the client share the same <code>process.env.NODE_ENV</code> value.</p>\n</li>\n</ul>\n'],toc:[{text:"MUI is an awesome organization. How can I support it?",level:2,hash:"mui-is-an-awesome-organization-how-can-i-support-it",children:[]},{text:"Why do the fixed positioned elements move when a modal is opened?",level:2,hash:"why-do-the-fixed-positioned-elements-move-when-a-modal-is-opened",children:[]},{text:"How can I disable the ripple effect globally?",level:2,hash:"how-can-i-disable-the-ripple-effect-globally",children:[]},{text:"How can I disable transitions globally?",level:2,hash:"how-can-i-disable-transitions-globally",children:[]},{text:"Do I have to use Emotion to style my app?",level:2,hash:"do-i-have-to-use-emotion-to-style-my-app",children:[]},{text:"When should I use inline-style vs. CSS?",level:2,hash:"when-should-i-use-inline-style-vs-css",children:[]},{text:"How do I use react-router?",level:2,hash:"how-do-i-use-react-router",children:[]},{text:"How can I access the DOM element?",level:2,hash:"how-can-i-access-the-dom-element",children:[]},{text:"My App doesn&#39;t render correctly on the server",level:2,hash:"my-app-doesnt-render-correctly-on-the-server",children:[]},{text:"Why are the colors I am seeing different from what I see here?",level:2,hash:"why-are-the-colors-i-am-seeing-different-from-what-i-see-here",children:[]},{text:"Why does component X require a DOM node in a prop instead of a ref object?",level:2,hash:"why-does-component-x-require-a-dom-node-in-a-prop-instead-of-a-ref-object",children:[]},{text:"What&#39;s the clsx dependency for?",level:2,hash:"whats-the-clsx-dependency-for",children:[]},{text:"I cannot use components as selectors in the styled(&#8203;) utility. What should I do?",level:2,hash:"i-cannot-use-components-as-selectors-in-the-styled-utility-what-should-i-do",children:[]},{text:"[legacy] I have several instances of styles on the page",level:2,hash:"legacy-i-have-several-instances-of-styles-on-the-page",children:[{text:"Possible reasons",level:3,hash:"possible-reasons"},{text:"Duplicated module in node_modules",level:3,hash:"duplicated-module-in-node-modules"},{text:"Running multiple applications on one page",level:3,hash:"running-multiple-applications-on-one-page"}]},{text:"[legacy] Why aren&#39;t my components rendering correctly in production builds?",level:2,hash:"legacy-why-arent-my-components-rendering-correctly-in-production-builds",children:[{text:"[legacy] CSS works only on first load and goes missing",level:3,hash:"legacy-css-works-only-on-first-load-and-goes-missing"},{text:"[legacy] React class name hydration mismatch",level:3,hash:"legacy-react-class-name-hydration-mismatch"}]}],title:"Frequently Asked Questions",headers:{components:[]}}},p={};p.scope={process:{},import:{}};var c={},l={},r=s(735250);function u(){return(0,r.jsx)(o.Z,(0,t.Z)({},a))}},292812:function(n,e,s){"use strict";s.d(e,{Z:function(){return b}});var a,t=s(41732),o=s(470079),i=s(639519),p=s.n(i),c=s(649052),l=s(267054),r=s(912526),u=s(327220),d=s(61212),h=s(477596),k=s(490956),m=s(141246),g=s(337798),y=s(240713),f=s(735250);function v(n){var e=n.mode,s=(0,r.tv)().setMode;return o.useEffect(function(){s(e)},[e,s]),null}function b(n){var e=(0,l.Z)(),s=(0,c.useRouter)(),i=(0,d.ln)(s.asPath).canonicalAs,p=n.disableAd,b=void 0!==p&&p,w=n.disableToc,x=n.disableCssVarsProvider,C=n.demos,M=void 0===C?{}:C,I=n.docs,P=n.demoComponents,T=n.srcComponents,j=I[(0,k.useUserLanguage)()]||I.en,R=i.startsWith("/joy-ui/")&&!(void 0!==x&&x),S=R?r.lL:o.Fragment,B=R?m.default:o.Fragment,A=(0,t.Z)({},R&&{mode:e.palette.mode});return(0,f.jsxs)(h.Z,{description:j.description,disableAd:b,disableToc:void 0!==w&&w,location:j.location,title:j.title,toc:j.toc,children:[b?null:a||(a=(0,f.jsx)(m.default,{children:(0,f.jsx)(y.Z,{children:(0,f.jsx)(g.ZP,{})})})),(0,f.jsxs)(S,{children:[R&&(0,f.jsx)(v,{mode:e.palette.mode}),j.rendered.map(function(n,s){return(0,f.jsx)(u.Z,{demoComponents:P,demos:M,disableAd:b,localizedDoc:j,renderedMarkdownOrDemo:n,srcComponents:T,theme:e,WrapperComponent:B,wrapperProps:A},"demos-section-".concat(s))})]})]})}v.propTypes={mode:p().oneOf(["light","dark"])}},113948:function(n,e,s){(window.__NEXT_P=window.__NEXT_P||[]).push(["/material-ui/getting-started/faq",function(){return s(62066)}])},884835:function(n,e,s){"use strict";var a=s(311596);function t(){}function o(){}o.resetWarningCache=t,n.exports=function(){function n(n,e,s,t,o,i){if(i!==a){var p=Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw p.name="Invariant Violation",p}}function e(){return n}n.isRequired=n;var s={array:n,bigint:n,bool:n,func:n,number:n,object:n,string:n,symbol:n,any:n,arrayOf:e,element:n,elementType:n,instanceOf:e,node:n,objectOf:e,oneOf:e,oneOfType:e,shape:e,exact:e,checkPropTypes:o,resetWarningCache:t};return s.PropTypes=s,s}},639519:function(n,e,s){n.exports=s(884835)()},311596:function(n){"use strict";n.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"}},function(n){n.O(0,[49774,76558,42608,97146,86291,60837,17376,8817,15686,88530,69677,1089,1201,26037,37092,33986,76141,96808,17624,60931,24993,42596,2464,86520,50188,68500,95077,27220,92888,40179],function(){return n(n.s=113948)}),_N_E=n.O()}]);